plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.115'
    id 'idea'
}

description = 'MCGO Platform NeoForge - Platform binding layer (the only module with platform dependencies)'

group = 'com.qisumei.csgo'
version = '1.1.5'

base {
    archivesName = 'qiscsgo'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

neoForge {
    version = project.property('neo_version')
    
    parchment {
        mappingsVersion = project.property('parchment_mappings_version')
        minecraftVersion = project.property('parchment_minecraft_version')
    }
    
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', 'qiscsgo'
        }
        
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', 'qiscsgo'
        }
        
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    
    mods {
        qiscsgo {
            sourceSet(sourceSets.main)
        }
    }
}

dependencies {
    // BOM for version management
    api platform(project(':mcgo-bom'))
    
    // Platform depends on all other modules
    api project(':mcgo-api')
    api project(':mcgo-core')
    api project(':mcgo-economy')
    api project(':mcgo-network')
    api project(':mcgo-data')
    
    // Will also assemble client and server modules
    runtimeOnly project(':mcgo-client')
    runtimeOnly project(':mcgo-server')
    
    // Integration with external mod
    runtimeOnly project(':mcgo-integration-qiscsgo')
}

// Platform module responsibilities:
// - Registration (items, blocks, entities)
// - Event subscription and translation to domain events
// - Tick and lifecycle management
// - Data packet channels
// - Command bridging
// - Final mod JAR output

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : project.property('minecraft_version'),
            minecraft_version_range: project.property('minecraft_version_range'),
            neo_version            : project.property('neo_version'),
            loader_version_range   : project.property('loader_version_range'),
            mod_id                 : 'qiscsgo',
            mod_name               : project.property('mod_name'),
            mod_license            : project.property('mod_license'),
            mod_version            : project.property('mod_version'),
            mod_authors            : project.property('mod_authors'),
            mod_description        : project.property('mod_description')
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
